name: Version Bump
run-name: Version bump ${{ github.event_name == 'workflow_dispatch' && inputs.bump_type || 'patch' }}${{ github.event_name == 'workflow_dispatch' && inputs.test_mode && ' (TEST)' || '' }}

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      test_mode:
        description: "Run in test mode (publishes to Test PyPI)"
        required: true
        default: false
        type: boolean
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e
        with:
          egress-policy: audit

      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: "3.9"

      - name: Install dependencies with retry
        uses: nick-invision/retry@7152eba30c6575329ac0576536151aca5a72780e
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            bash -c "pip install poetry pytest && \
                     poetry install --no-interaction --no-root -vvv --all-extras && \
                     poetry install --no-interaction --no-root --all-extras -vvv && \
                     pip install wheel && \
                     pip install --upgrade setuptools && \
                     pip install --editable '.[test,ml,medical,dev, ocv]'"

      - name: Set bump type and test mode
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE="${{ inputs.bump_type }}"
            TEST_MODE="${{ inputs.test_mode }}"
          else
            BUMP_TYPE="patch"  # Default to "patch" for pull requests
            TEST_MODE="true"    # Always run in test mode for pull requests
          fi
          echo "BUMP_TYPE=${BUMP_TYPE}" >> $GITHUB_ENV
          echo "TEST_MODE=${TEST_MODE}" >> $GITHUB_ENV

      - name: Bump version
        run: |
          python deploy/increase_version.py --${{ env.BUMP_TYPE }} --auto-confirm y
          BASE_VERSION=$(grep '__version__' darwin/version/__init__.py | cut -d '"' -f 2)  

          if [[ "${{ env.TEST_MODE }}" == "true" ]]; then
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            TEST_VERSION="${BASE_VERSION}-test.${TIMESTAMP}"
            echo "Adding test suffix"
            # Update version in pyproject.toml and in __init__.py
            awk -v new_version="$TEST_VERSION" '/^version = / {$0 = "version = \"" new_version "\""} 1' pyproject.toml > pyproject.tmp && mv pyproject.tmp pyproject.toml
            awk -v new_version="$TEST_VERSION" '/^__version__ = / {$0 = "__version__ = \"" new_version "\""} 1' darwin/__init__.py > darwin/__init__.tmp && mv darwin/__init__.tmp darwin/__init__.py

            NEW_VERSION="${BASE_VERSION}-test.${TIMESTAMP}"
            echo $NEW_VERSION
            TAG_PREFIX="test-"
            BRANCH_NAME="test/version-bump-${NEW_VERSION}"
          else
            NEW_VERSION="${BASE_VERSION}"
            TAG_PREFIX="v"
            BRANCH_NAME="master"
          fi
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "TAG_PREFIX=${TAG_PREFIX}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push changes
        if: ${{ env.TEST_MODE != 'true' }}
        run: |
          echo "Commit and push version changes"
          git add pyproject.toml darwin/__init__.py
          git commit -m "Version bump to ${{ env.NEW_VERSION }}"
          git push origin HEAD:${BRANCH_NAME}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create test branch
        if: ${{ env.TEST_MODE == 'true' }}
        run: |
          echo "Create test branch"
          git checkout -b ${BRANCH_NAME}
          git push origin ${BRANCH_NAME}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          git tag -a "${TAG_PREFIX}${NEW_VERSION}" -m "bump version to ${TAG_PREFIX}${NEW_VERSION}"
          git push origin "${TAG_PREFIX}${NEW_VERSION}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
